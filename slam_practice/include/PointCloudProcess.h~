#ifndef POINTCLOUDPROCESS_H
#define POINTCLOUDPROCESS_H

#include <stdlib.h>
#include <iostream>
#include <string>
#include <vector> 
#include <pthread.h>

#include <Kinect_Input.h>
#include <Detect.h>

#include <XnCppWrapper.h>

#include "opencv2/opencv.hpp"
#include "opencv2/core/eigen.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/imgcodecs.hpp"
#include "opencv2/highgui/highgui.hpp"

#include <pcl-1.7/pcl/io/pcd_io.h>
#include <pcl-1.7/pcl/point_types.h>
#include <pcl-1.7/pcl/visualization/pcl_visualizer.h>
#include <pcl-1.7/pcl/visualization/cloud_viewer.h>
#include <pcl-1.7/pcl/common/transforms.h>
#include <pcl-1.7/pcl/filters/voxel_grid.h>
#include <pcl-1.7/pcl/filters/passthrough.h>

#include <Eigen/Core>
#include <Eigen/Geometry>

#include <g2o/types/slam3d/types_slam3d.h> //顶点类型
#include <g2o/core/sparse_optimizer.h>
#include <g2o/core/block_solver.h>
#include <g2o/core/factory.h>
#include <g2o/core/optimization_algorithm_factory.h>
#include <g2o/core/optimization_algorithm_gauss_newton.h>
#include <g2o/solvers/csparse/linear_solver_csparse.h>
#include <g2o/core/robust_kernel.h>
#include <g2o/core/robust_kernel_factory.h>
#include <g2o/core/optimization_algorithm_levenberg.h>
#include <g2o/core/marginal_covariance_cholesky.h>

using namespace xn;
using namespace cv;
using namespace std;
using namespace pcl;
using namespace Eigen;
using namespace g2o;

class PointCloudProcess
{
	public:
		
		pthread_t ptr_cloudthread;
		
		DepthGenerator m_depthgen;
		DepthMetaData* m_depthmeta;
		const XnDepthPixel* m_pdepthpix;
		XnRGB24Pixel* m_pimagepix;
		
		Mat m_inlier;
		Isometry3d m_matrix;
		
		int m_flag4det;
		int m_flag2det;
		int m_flag;
		
		vector<Mat> m_imgkf;
 		vector<XnPoint3D*> m_depthkf;
 		vector<XnRGB24Pixel*> m_colorkf;
 		SparseOptimizer m_gOptimizer;
		
	public:
		PointCloudProcess();
//		void map_generation(Isometry3d mg_matrix, Mat tmp_inliers, DepthGenerator* tmp_pdepth, DepthMetaData* tmp_pdepthmeta, const XnDepthPixel* tmp_pdepthpixel, const XnRGB24Pixel* tmp_pimgpixel, int mg_detflag);
		void map_generation(Isometry3d mg_matrix, Mat tmp_inliers, DepthGenerator mg_depth, vector<XnPoint3D*> mg_depthkeyframe, vector<XnRGB24Pixel*> mg_colorkeyframe, int mg_detflag);
		PointCloud<pcl::PointXYZRGB>::Ptr pointcloud_generation(DepthGenerator pcg_pdepth, XnPoint3D* pcg_depthcloud, XnRGB24Pixel* pcg_pimgpixel);
		bool image2pointcloud(uint32_t in_size, XnPoint3D* in_depthCloud, XnPoint3D* in_realCloud);
			
		static void* POINTCLOUD_THREAD(void* pvData);
};
#endif
